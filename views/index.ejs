<% include include/header %>
<div id="left-div" class="col-lg-12">
    <p id="introText"> enter your<br> new address</p>
    <form action="/saving_address" method="post" name="newaddress">
        <input type="address" class="form-control" name="address" id="autocomplete" onfocus="geolocate()" id="address"
            placeholder="address">
        <br><br>
        <button type="submit" id="homeNextBtn" class="btn btn-primary" role="button">Next</button>
        <table id="address" style="display: none;">
            <tr>
                <td class="label">Street address</td>
                <td class="slimField"><input class="field" id="street_number" name="street_number"/></td>
                <td class="wideField" colspan="2"><input class="field" id="route" name="route"/></td>
            </tr>
            <tr>
                <td class="label">City</td>
                <td class="wideField" colspan="3"><input class="field" id="locality" name="city"/></td>
            </tr>
            <tr>
                <td class="label">State</td>
                <td class="slimField"><input class="field" id="administrative_area_level_1" name="state"/></td>
                <td class="label">Zip code</td>
                <td class="wideField"><input class="field" id="postal_code" name="postal_code"/></td>
            </tr>
            <tr>
                <td class="label">Country</td>
                <td class="wideField" colspan="3"><input class="field" id="country" name="country"/></td>
            </tr>
        </table>
    </form>
</div>
<script>
    var placeSearch, autocomplete;
    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            { types: ['geocode'] });

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
    }

    function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
            document.getElementById(component).value = '';
            document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
            var addressType = place.address_components[i].types[0];
            if (componentForm[addressType]) {
                var val = place.address_components[i][componentForm[addressType]];
                document.getElementById(addressType).value = val;
            }
        }
    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDmaC-xbqxCHKJrs2jVcV--RLFdubyClDM&libraries=places&callback=initAutocomplete"
    async defer></script>
<% include include/footer %>